{:all-keys

 [[:op "The node op"]
  [:form "The clojure form from which the node originated"]
  [:env "The environment map"]
  ^:optional
  [:children "A vector of keywords, representing the children nodes of this node, in order of evaluation"]
  ^:optional
  [:raw-forms "If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form"]
  ^:optional
  [:top-level "`true` if this is the root node"]
  [:tag "The tag this expression is required to have"]
  [:o-tag "The tag of this expression, based on the node's children"]
  ^:optional
  [:ignore-tag "`true` if this node returns a statement rather than an expression"]
  ^:optional
  [:loops "A set of the loop-ids that might cause this node to recur"]]

 :node-keys
 [{:op   :binding
   :doc  "Node for a binding symbol"
   :keys [[:form "The binding symbol"]
          [:name "The uniquified binding symbol"]
          [:local "One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this"]
          ^:optional
          [:arg-id "When :local is :arg, the parameter index"]
          ^:optional
          [:variadic? "When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments"]
          ^:optional ^:children
          [:init "When :local is :let, :letfn or :loop, an AST node representing the bound value"]
          [:atom "An atom shared by this :binding node and all the :local nodes that refer to this binding"]
          #_
          ^:optional
          [:to-clear? "When :local is :let, :loop, :catch or :arg, a boolean indicating whether this binding is never used and this is immediately eligible for clearing"]]}
  {:op   :case
   :doc  "Node for a case* special-form expression"
   :keys [[:form "`(case* expr shift maks default case-map switch-type test-type skip-check?)`"]
          ^:children
          [:test "The AST node for the expression to test against"]
          ^:children
          [:tests "A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field"]
          ^:children
          [:thens "A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field"]
          ^:children
          [:default "An AST node representing the default value of the case expression"]
          [:shift]
          [:mask]
          [:low]
          [:high]
          [:switch-type "One of :sparse or :compact"]
          [:test-type "One of :int, :hash-equiv or :hash-identity"]
          [:skip-check? "A set of case ints for which equivalence checking should not be done"]]}
  {:op   :case-test
   :doc  "Node for a test value in a case* expression"
   :keys [^:children
          [:test "A :const AST node representing the test value"]
          [:hash]]}
  {:op   :case-then
   :doc  "Node for a then expression in a case* expression"
   :keys [^:children
          [:then "An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value"]
          [:hash]]}
  {:op   :catch
   :doc  "Node for a catch expression"
   :keys [[:form "`(catch class local body*)`"]
          ^:children
          [:class "A :const AST node with :type :class representing the type of exception to catch"]
          ^:children
          [:local "The :binding AST node for the caught exception"]
          ^:children
          [:body "Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause"]]}
  {:op   :const
   :doc   "Node for a constant literal or a quoted collection literal"
   :keys [[:form "A constant literal or a quoted collection literal"]
          [:literal? "`true`"]
          [:type "one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown"]
          [:val "The value of the constant node"]
          ^:optional ^:children
          [:meta "An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map"]
          #_
          ^:optional
          [:id "A numeric id for the constant value, will be the same for every instance of this constant inside the same compilation unit, not present if :type is :nil or :bool"]]}
  {:op   :def
   :doc  "Node for a def special-form expression"
   :keys [[:form "`(def name docstring? init?)`"]
          [:name "The var symbol to define in the current namespace"]
          [:var "The Var object created (or found, if it already existed) named by the symbol :name in the current namespace"]
          ^:optional ^:children
          [:meta "An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map"]
          ^:optional ^:children
          [:init "An AST node representing the initial value of the var"]
          ^:optional
          [:doc "The docstring for this var"]
          #_
          [:id "A numeric id for this var, will be the same for every instance of this var inside the same compilation unit"]]}
  {:op   :deftype
   :doc  "Node for a deftype* special-form expression"
   :keys [[:form "`(deftype* name class.name [arg*] :implements [interface*] method*)`"]
          [:interfaces "A set of the interfaces implemented by the type"]
          [:name "The symbol name of the deftype"]
          [:class-name "A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation"]
          ^:children
          [:fields "A vector of :binding AST nodes with :local :field representing the deftype fields"]
          ^:children
          [:methods "A vector :method AST nodes representing the deftype methods"]
          #_#_#_#_
          [:closed-overs "A map of field name -> :binding AST node of the field"]
          [:protocol-callsites "A map of protocol Vars that appear in the bodies of the deftype methods"]
          [:keyword-callsites "A map of keywords that appear in keyword-invoke position in the bodies of the deftype methods"]
          [:constants "A map of the constants that appear in the bodies of the deftype methods. The mapping is from a map with :form, :meta and :tag fields to a map with :id, :tag :val and :type fields, the :id will be the same for all every instance of this constant inside the same compilation unit."]]}
  {:op   :do
   :doc  "Node for a do special-form expression or for another special-form's body"
   :keys [[:form "`(do statement* ret)`"]
          ^:children
          [:statements "A vector of AST nodes representing all but the last expression in the do body"]
          ^:children
          [:ret "An AST node representing the last expression in the do body (the block's return value)"]
          ^:optional
          [:body? "`true` if this node is a synthetic body"]]}
  {:op   :fn
   :doc  "Node for a fn* special-form expression"
   :keys [[:form "`(fn* name? [arg*] body*)` or `(fn* name? method*)`"]
          [:variadic? "`true` if this function contains a variadic arity method"]
          [:max-fixed-arity "The number of arguments taken by the fixed-arity method taking the most arguments"]
          #_#_
          [:internal-name "The internal name symbol used for the fn"]
          [:class-id "A unique id representing this function"]
          ^:optional ^:children
          [:local "A :binding AST node with :local :fn representing the function's local name, if one is supplied"]
          ^:children
          [:methods "A vector of :fn-method AST nodes representing the fn method arities"]
          [:once "`true` if the fn is marked as `^:once fn*`, meaning it will only be executed once and thus allowing for the clearing of closed-over locals"]
          #_#_#_#_
          [:closed-overs "A map of uniquified local name -> :binding AST node of the local, containing all the locals closed-over by this fn"]
          [:protocol-callsites "A map of protocol Vars that appear in the bodies of the fn methods"]
          [:keyword-callsites "A map of keywords that appear in keyword-invoke position in the bodies of the fn methods"]
          [:constants "A map of the constants that appear in the bodies of the fn methods. The mapping is from a map with :form, :meta and :tag fields to a map with :id, :tag :val and :type fields, the :id will be the same for all every instance of this constant inside the same compilation unit."]]}
  {:op   :fn-method
   :doc  "Node for an arity method in a fn* expression"
   :keys [[:form "`([arg*] body*)`"]
          [:loop-id "Unique symbol identifying this method as a target for recursion"]
          [:variadic? "`true` if this fn-method takes a variable number of arguments"]
          ^:children
          [:params "A vector of :binding AST nodes with :local :arg representing this fn-method args"]
          [:fixed-arity "The number of non-variadic args this fn-method takes"]
          ^:children
          [:body "Synthetic :do node (with :body? `true`) representing the body of this fn-method"]]}
  {:op   :host-interop
   :doc  "Node for a no-arg instance-call or for an instance-field that couldn't be resolved at compile time"
   :keys [[:form "`(. target m-or-f)`"]
          ^:children
          [:target "An AST node representing the target object"]
          [:m-or-f "Symbol naming the no-arg method or field to lookup in the target"]
          [:assignable? "`true`"]]}
  {:op   :if
   :doc  "Node for an if special-form expression"
   :keys [[:form "`(if test then else?)`"]
          ^:children
          [:test "An AST node representing the test expression"]
          ^:children
          [:then "An AST node representing the expression's return value if :test evaluated to a truthy value"]
          ^:children
          [:else "An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil"]]}
  {:op   :import
   :doc  "Node for a clojure.core/import* special-form expression"
   :keys [[:form "`(clojure.core/import* \"qualified.class\")`"]
          [:class "String representing the qualified class to import"]]}
  {:op   :instance-call
   :doc  "Node for an instance method call"
   :keys [[:form "`(.method instance arg*)`"]
          [:method "Symbol naming the invoked method"]
          ^:children
          [:instance "An AST node representing the instance to call the method on"]
          ^:children
          [:args "A vector of AST nodes representing the args passed to the method call"]
          ^:optional
          [:validated? "`true` if the method call could be resolved at compile time"]
          ^:optional
          [:class "If :validated? the class or interface the method belongs to"]]}
  {:op   :instance-field
   :doc  "Node for an instance field access"
   :keys  [[:form "`(.-field instance)`"]
           [:field "Symbol naming the field to access"]
           ^:children
           [:instance "An AST node representing the instance to lookup the symbol on"]
           [:assignable? "`true` if the field is set!able"]
           [:class "The class the field belongs to"]]}
  {:op   :instance?
   :doc  "Node for a clojure.core/instance? call where the Class is known at compile time"
   :keys [[:form "`(clojure.core/instance? Class x)`"]
          [:class "The Class to test the :target for instanceability"]
          ^:children
          [:target "An AST node representing the object to test for instanceability"]]}
  {:op   :invoke
   :doc  "Node for an invoke expression"
   :keys [[:form "`(f arg*)`"]
          ^:children
          [:fn "An AST node representing the function to invoke"]
          ^:children
          [:args "A vector of AST nodes representing the args to the function"]
          ^:optional
          [:meta "Map of metadata attached to the invoke :form"]]}
  {:op   :keyword-invoke
   :doc  "Node for an invoke expression where the fn is a not-namespaced keyword and thus a keyword callsite can be emitted"
   :keys [[:form "`(:k instance)`"]
          ^:children
          [:keyword "An AST node representing the keyword to lookup in the instance"]
          ^:children
          [:target "An AST node representing the instance to lookup the keyword in"]]}
  {:op   :let
   :doc  "Node for a let* special-form expression"
   :keys  [[:form "`(let* [binding*] body*)`"]
           ^:children
           [:bindings "A vector of :binding AST nodes with :local :let"]
           ^:children
           [:body "Synthetic :do node (with :body? `true`) representing the body of the let expression"]]}
  {:op   :letfn
   :doc  "Node for a letfn* special-form expression"
   :keys  [[:form "`(letfn* [binding*] body*)`"]
           ^:children
           [:bindings "A vector of :binding AST nodes with :local :letfn"]
           ^:children
           [:body "Synthetic :do node (with :body? `true`) representing the body of the letfn expression"]]}
  {:op   :local
   :doc  "Node for a local symbol"
   :keys [[:form "The local symbol"]
          [:assignable? "`true` if the corresponding :binding AST node is :local :field and is declared either ^:volatile-mutable or ^:unsynchronized-mutable"]
          [:name "The uniquified local symbol"]
          [:local "One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this"]
          ^:optional
          [:arg-id "When :local is :arg, the parameter index"]
          ^:optional
          [:variadic? "When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments"]
          [:atom "An atom shared by this :local node, the :binding node this local refers to and all the other :local nodes that refer to this same local"]
          #_
          ^:optional
          [:to-clear? "When :local is :let, :loop, :catch or :arg, a boolean indicating whether this local is eligible for locals clearing"]]}
  {:op   :loop
   :doc  "Node a loop* special-form expression"
   :keys [[:form "`(loop* [binding*] body*)`"]
          ^:children
          [:bindings "A vector of :binding AST nodes with :local :loop"]
          ^:children
          [:body "Synthetic :do node (with :body? `true`) representing the body of the loop expression"]
          [:loop-id "Unique symbol identifying this loop as a target for recursion"]
          #_
          [:closed-overs "A map of uniquified local name -> :binding AST node of the local, containing all the locals closed-over by this loop"]]}
  {:op   :map
   :doc  "Node for a map literal with attached metadata and/or non literal elements"
   :keys [[:form "`{[key val]*}`"]
          ^:children
          [:keys "A vector of AST nodes representing the keys of the map"]
          ^:children
          [:vals "A vector of AST nodes representing the vals of the map"]]}
  {:op   :method
   :doc  "Node for a method in a deftype* or reify* special-form expression"
   :keys [[:form "`(method [this arg*] body*)`"]
          [:bridges "A list of signature for bridge methods to emit"]
          [:interface "The interface (or Object) this method belongs to"]
          ^:children
          [:this "A :binding AST node with :local :this representing the \"this\" local"]
          [:loop-id "Unique symbol identifying this method as a target for recursion"]
          [:name "The symbol name of this method"]
          ^:children
          [:params "A vector of AST :binding nodes with :local :arg representing the arguments of the method"]
          [:fixed-arity "The number of args this method takes"]
          ^:children
          [:body "Synthetic :do node (with :body? `true`) representing the body of this method"]]}
  {:op   :monitor-enter
   :doc  "Node for a monitor-enter special-form statement"
   :keys [[:form "`(monitor-enter target)`"]
          ^:children
          [:target "An AST node representing the monitor-enter sentinel"]]}
  {:op   :monitor-exit
   :doc  "Node for a monitor-exit special-form statement"
   :keys [[:form "`(monitor-exit target)`"]
          ^:children
          [:target "An AST node representing the monitor-exit sentinel"]]}
  {:op   :new
   :doc  "Node for a new special-form expression"
   :keys [[:form "`(new Class arg*)`"]
          ^:children
          [:class "A :const AST node with :type :class representing the Class to instantiate"]
          ^:children
          [:args "A vector of AST nodes representing the arguments passed to the Class constructor"]
          ^:optional
          [:validated? "`true` if the constructor call could be resolved at compile time"]]}
  {:op   :prim-invoke
   :doc  "Node for an invoke expression that can be optimized using one of the primitive interfaces in IFn"
   :keys [[:form "`(prim-f arg*)`"]
          ^:children
          [:fn "An AST node representing the function to invoke"]
          ^:children
          [:args "A vector of AST nodes representing the args to the function"]
          [:prim-interface "The primitive interface in IFn that will be used"]
          ^:optional
          [:meta "Map of metadata attached to the invoke :form"]]}
  {:op   :protocol-invoke
   :doc  "Node for an invoke expression where the function is a protocol function var"
   :keys [[:form "`(proto-fn target arg*)`"]
          ^:children
          [:protocol-fn "An AST node representing the protocol function var to invoke"]
          ^:children
          [:target "An AST node representing the target of the protocol function call"]
          ^:children
          [:args "A vector of AST nodes representing the args to the protocol function"]]}
  {:op   :quote
   :doc  "Node for a quote special-form expression"
   :keys [[:form "`(quote expr)`"]
          ^:children
          [:expr "A :const AST node representing the quoted value"]
          [:literal? "`true`"]]}
  {:op   :recur
   :doc  "Node for a recur special-form expression"
   :keys [[:form "`(recur expr*)`"]
          ^:children
          [:exprs "A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration"]
          [:loop-id "Unique symbol identifying the enclosing loop target"]]}
  {:op   :reify
   :doc  "Node for a reify* special-form expression"
   :keys [[:form "`(reify* [interface*] method*)`"]
          [:interfaces "A set of the interfaces implemented by the generated type"]
          [:class-name "The generated class for the reify, should *never* be instantiated or used on instance? checks"]
          ^:children
          [:methods "A vector :method AST nodes representing the reify methods"]
          #_#_#_#_#_
          [:class-id "A unique id representing this reify"]
          [:closed-overs "A map of uniquified local name -> :binding AST node of the local, containing all the locals closed-over by this reify"]
          [:protocol-callsites "A map of protocol Vars that appear in the bodies of the reify methods"]
          [:keyword-callsites "A map of keywords that appear in keyword-invoke position in the bodies of the reify methods"]
          [:constants "A map of the constants that appear in the bodies of the reify methods. The mapping is from a map with :form, :meta and :tag fields to a map with :id, :tag :val and :type fields, the :id will be the same for all every instance of this constant inside the same compilation unit."]]}
  {:op   :set
   :doc  "Node for a set literal with attached metadata and/or non literal elements"
   :keys [[:form "`#{item*}`"]
          ^:children
          [:items "A vector of AST nodes representing the items of the set"]]}
  {:op   :set!
   :doc  "Node for a set! special-form expression"
   :keys [[:form "`(set! target val)`"]
          ^:children
          [:target "An AST node representing the target of the set! expression, must be :assignable?"]
          ^:children
          [:val "An AST node representing the new value for the target"]]}
  {:op   :static-call
   :doc  "Node for a static method call"
   :keys [[:form "`(Class/method arg*)`"]
          [:class "The Class the static method belongs to"]
          [:method "The symbol name of the static method"]
          ^:children
          [:args "A vector of AST nodes representing the args to the method call"]
          ^:optional
          [:validated? "`true` if the static method could be resolved at compile time"]]}
  {:op   :static-field
   :doc  "Node for a static field access"
   :keys [[:form "`Class/field`"]
          [:class "The Class the static field belongs to"]
          [:field "The symbol name of the static field"]
          ^:optional
          [:assignable? "`true` if the static field is set!able"]]}
  {:op   :the-var
   :doc  "Node for a var special-form expression"
   :keys [[:form "`(var var-name)`"]
          [:var "The Var object this expression refers to"]
          #_
          [:id "A numeric id for this var, will be the same for every instance of this var inside the same compilation unit"]]}
  {:op   :throw
   :doc  "Node for a throw special-form statement"
   :keys [[:form "`(throw exception)`"]
          ^:children
          [:exception "An AST node representing the exception to throw"]]}
  {:op   :try
   :doc  "Node for a try special-form expression"
   :keys  [[:form "`(try body* catch* finally?)`"]
           ^:children
           [:body "Synthetic :do AST node (with :body? `true`) representing the body of this try expression"]
           ^:children
           [:catches "A vector of :catch AST nodes representing the catch clauses of this try expression"]
           ^:optional ^:children
           [:finally "Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression"]]}
  {:op   :var
   :doc  "Node for a var symbol"
   :keys [[:form "A symbol naming the var"]
          [:var "The Var object this symbol refers to"]
          ^:optional
          [:assignable? "`true` if the Var is :dynamic"]
          #_
          [:id "A numeric id for this var, will be the same for every instance of this var inside the same compilation unit"]]}
  {:op   :vector
   :doc  "Node for a vector literal with attached metadata and/or non literal elements"
   :keys [[:form "`[item*]`"]
          ^:children
          [:items "A vector of AST nodes representing the items of the vector"]]}
  {:op   :with-meta
   :doc  "Node for a non quoted collection literal or fn/reify expression with attached metadata"
   :keys [[:form "Non quoted collection literal or fn/reify expression with attached metadata"]
          ^:children
          [:meta "An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map"]
          ^:children
          [:expr "The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify"]]}]}
